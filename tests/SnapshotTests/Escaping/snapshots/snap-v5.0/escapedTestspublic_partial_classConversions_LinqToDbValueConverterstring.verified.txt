[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

#pragma warning disable CS1573

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Intellenum;
using System;


namespace @class
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
    
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstringDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.String, Value = { _value }")]
    public partial class escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring : 
        global::System.IEquatable<escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring>, 
        global::System.IComparable, 
        global::System.IComparable<escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring> 
    {
        // const fields...
public const System.String OneValue = "1";


        

#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly System.String _value;

        

        /// <summary>
        /// Gets the underlying <see cref="System.String" /> value if set, otherwise default
        /// </summary>
        public System.String Value => _value;

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
            Name = "[UNDEFINED]";
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        public escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring(System.String value)
        {
            _value = value;
            Name = "[INFERRED-TO-BE-REPLACED!]";
            _isInitialized = true;
        }        

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring(string enumName, System.String value)
        {
            _value = value;
            Name = enumName;
            _isInitialized = true;
        }

        public string Name { get; private set; }

        public void Deconstruct(out string Name, out System.String Value)
        {
            Name = this.Name;
            Value = this.Value;
        }

        
        /// <summary>
        /// Builds a member from an enum value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring FromValue(System.String value)
        {
                bool b = TryFromValue(value, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring has no matching members with a value of '{value}'");
        }            

        /// <summary>
        /// Tries to get a member based on value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromValue(System.String value, out escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring member)
        {
            switch (value) 
{
    case "1":
        member = escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring.One; 
        return true;
    default:
        member = default;
        return false;
}

        }        

        /// <summary>
        /// Determines if there is a member that is defined with the specified value.
        /// </summary>
        /// <param name="value">The value to search for.</param>
        /// <returns>True if there is a member with matching value, otherwise False.</returns>
        public static bool IsDefined(System.String value)
        {
            return value switch { "1" => true,
_ => false
 };
        }
        

        
        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring FromName(ReadOnlySpan<char> name)
        {
                bool b = TryFromName(name, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring has no matching members named '{name.ToString()}'");
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>True if found, otherwise false.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(ReadOnlySpan<char> name, out escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring member)
        {
            switch (name) 
{
    case ("One"):
        member = escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring.One; 
        return true;
    default:
        member = default;
        return false;
}

        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNamedDefined(ReadOnlySpan<char> name)
        {
            return TryFromName(name, out _);
        }
        

        /// <summary>
        /// Builds a member from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>A member of this type.</returns>
        private static escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring From(string name, System.String value)
        {
                        if (value is null)
            {
                throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
            }


            escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring member = new escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring(name, value);

            return member;
        }

        // A placeholder method used by the source generator during compilation so that
        // users call 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name, System.String value)
        {
        }

        // only called internally when something has been deserialized into
        // its primitive type.
        private static escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring Deserialize(System.String value)
        {
                        if (value is null)
            {
                throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
            }


                    if(value == One.Value) return One;


            return FromValue(value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public global::System.Boolean Equals(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized members via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized members of this type.
            if(!_isInitialized || !other._isInitialized) return false;
	    	
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(Value, other.Value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring) obj);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => Equals(left, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => !Equals(left, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, System.String right) => Equals(left.Value, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, System.String right) => !Equals(left.Value, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(System.String left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => Equals(left, right.Value);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(System.String left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => !Equals(left, right.Value);
        
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => left.CompareTo(right) < 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <=(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => left.CompareTo(right) <= 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => left.CompareTo(right) > 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >=(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring left, escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring right) => left.CompareTo(right) >= 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static explicit operator escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring(System.String value) => FromValue(value);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator System.String(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring value) => value.Value;

        public int CompareTo(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other == null) return 1;
            if(other is escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring", nameof(other));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ Value.GetHashCode();
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.String>.Default.GetHashCode();
                return hash;
            }
        }

        
// member...

public static readonly escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring One = new escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring("One","1");

        
        public static global::System.Collections.Generic.IEnumerable<escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring> List()
        {
            yield return One;

        }        

        /// <summary>Returns the name of the enum.</summary>
    public override global::System.String ToString() => Name;

        





        public class LinqToDbValueConverter : global::LinqToDB.Common.ValueConverter<escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring, global::System.String>
        {
            public LinqToDbValueConverter()
                : base(
                      v => v.Value,
                      p => escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring.Deserialize(p),
                      handlesNulls: false)
            { }
        }

        
        

        internal sealed class escapedTestspublic_partial_classConversions_LinqToDbValueConverterstringDebugView
        {
            private readonly escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring _t;

            escapedTestspublic_partial_classConversions_LinqToDbValueConverterstringDebugView(escapedTestspublic_partial_classConversions_LinqToDbValueConverterstring t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.String";
            public System.String Value => _t.Value ;

            public global::System.String Conversions => @"";
                }
    }
}
]