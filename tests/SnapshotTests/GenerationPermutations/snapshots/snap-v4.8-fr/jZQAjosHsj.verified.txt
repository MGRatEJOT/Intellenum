[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

#pragma warning disable CS1573

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Intellenum;
using System;


namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
    
    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(internal_partial_classConversions_DapperTypeHandlercharDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Char, Value = { _value }")]
    internal partial class internal_partial_classConversions_DapperTypeHandlerchar : 
        global::System.IEquatable<internal_partial_classConversions_DapperTypeHandlerchar>, 
        global::System.IComparable, 
        global::System.IComparable<internal_partial_classConversions_DapperTypeHandlerchar> 
    {
        

                private static readonly System.Lazy<System.Collections.Generic.Dictionary<string, internal_partial_classConversions_DapperTypeHandlerchar>> _namesToEnums = new( () =>
        new()
        {
            { "One", One },

        });

        private static readonly System.Lazy<System.Collections.Generic.Dictionary<System.Char, internal_partial_classConversions_DapperTypeHandlerchar>> _valuesToEnums = new( () =>
        new()
        {
            { One.Value, One },

        });

#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly System.Char _value;

        

        /// <summary>
        /// Gets the underlying <see cref="System.Char" /> value if set, otherwise default
        /// </summary>
        public System.Char Value => _value;

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public internal_partial_classConversions_DapperTypeHandlerchar()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
            Name = "[UNDEFINED]";
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private internal_partial_classConversions_DapperTypeHandlerchar(System.Char value)
        {
            _value = value;
            Name = "[INFERRED-TO-BE-REPLACED!]";
            _isInitialized = true;
        }        

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private internal_partial_classConversions_DapperTypeHandlerchar(string enumName, System.Char value)
        {
            _value = value;
            Name = enumName;
            _isInitialized = true;
        }

        public string Name { get; private set; }

        public void Deconstruct(out string Name, out System.Char Value)
        {
            Name = this.Name;
            Value = this.Value;
        }

        
        /// <summary>
        /// Builds a member from an enum value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static internal_partial_classConversions_DapperTypeHandlerchar FromValue(System.Char value)
        {
                bool b =  _valuesToEnums.Value.TryGetValue(value, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"internal_partial_classConversions_DapperTypeHandlerchar has no matching members with a value of '{value}'");
        }            

        /// <summary>
        /// Tries to get a member based on value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromValue(System.Char value, out internal_partial_classConversions_DapperTypeHandlerchar member)
        {
            return  _valuesToEnums.Value.TryGetValue(value, out member);
        }        

        /// <summary>
        /// Determines if there is a member that is defined with the specified value.
        /// </summary>
        /// <param name="value">The value to search for.</param>
        /// <returns>True if there is a member with matching value, otherwise False.</returns>
        public static bool IsDefined(System.Char value)
        {
            return _valuesToEnums.Value.TryGetValue(value, out _);
        }
        

        
#region .NET Framework Compatability Methods

        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static internal_partial_classConversions_DapperTypeHandlerchar FromName(string name)
        {
            return FromName(name.AsSpan());
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(string name, out internal_partial_classConversions_DapperTypeHandlerchar member)
        {
            return TryFromName(name.AsSpan(), out member);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNamedDefined(string name)
        {
            return IsNamedDefined(name.AsSpan());
        }

#endregion
        
        
        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static internal_partial_classConversions_DapperTypeHandlerchar FromName(ReadOnlySpan<char> name)
        {
                bool b = TryFromName(name, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"internal_partial_classConversions_DapperTypeHandlerchar has no matching members named '{name.ToString()}'");
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(ReadOnlySpan<char> name, out internal_partial_classConversions_DapperTypeHandlerchar member)
        {
            // Not a fan of using foreach here, but Dictionary<,>.KeyCollection is a bit limited
foreach (var key in _namesToEnums.Value.Keys)
{
    if (key.AsSpan() != name)
    {
        continue;
    }
    
    member = _namesToEnums.Value[key];
    return true;
}

member = default(internal_partial_classConversions_DapperTypeHandlerchar);
return false;
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNamedDefined(ReadOnlySpan<char> name)
        {
            return TryFromName(name, out _);
        }
        

        /// <summary>
        /// Builds a member from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>A member of this type.</returns>
        private static internal_partial_classConversions_DapperTypeHandlerchar From(string name, System.Char value)
        {
            

            internal_partial_classConversions_DapperTypeHandlerchar member = new internal_partial_classConversions_DapperTypeHandlerchar(name, value);

            return member;
        }

        // A placeholder method used by the source generator during compilation so that
        // users call 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name, System.Char value)
        {
        }

        // only called internally when something has been deserialized into
        // its primitive type.
        private static internal_partial_classConversions_DapperTypeHandlerchar Deserialize(System.Char value)
        {
            

                    if(value == One.Value) return One;


            return FromValue(value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public global::System.Boolean Equals(internal_partial_classConversions_DapperTypeHandlerchar other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized members via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized members of this type.
            if(!_isInitialized || !other._isInitialized) return false;
	    	
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Char>.Default.Equals(Value, other.Value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((internal_partial_classConversions_DapperTypeHandlerchar) obj);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(internal_partial_classConversions_DapperTypeHandlerchar left, internal_partial_classConversions_DapperTypeHandlerchar right) => Equals(left, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(internal_partial_classConversions_DapperTypeHandlerchar left, internal_partial_classConversions_DapperTypeHandlerchar right) => !Equals(left, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(internal_partial_classConversions_DapperTypeHandlerchar left, System.Char right) => Equals(left.Value, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(internal_partial_classConversions_DapperTypeHandlerchar left, System.Char right) => !Equals(left.Value, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(System.Char left, internal_partial_classConversions_DapperTypeHandlerchar right) => Equals(left, right.Value);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(System.Char left, internal_partial_classConversions_DapperTypeHandlerchar right) => !Equals(left, right.Value);
        
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <(internal_partial_classConversions_DapperTypeHandlerchar left, internal_partial_classConversions_DapperTypeHandlerchar right) => left.CompareTo(right) < 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <=(internal_partial_classConversions_DapperTypeHandlerchar left, internal_partial_classConversions_DapperTypeHandlerchar right) => left.CompareTo(right) <= 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >(internal_partial_classConversions_DapperTypeHandlerchar left, internal_partial_classConversions_DapperTypeHandlerchar right) => left.CompareTo(right) > 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >=(internal_partial_classConversions_DapperTypeHandlerchar left, internal_partial_classConversions_DapperTypeHandlerchar right) => left.CompareTo(right) >= 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static explicit operator internal_partial_classConversions_DapperTypeHandlerchar(System.Char value) => FromValue(value);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator System.Char(internal_partial_classConversions_DapperTypeHandlerchar value) => value.Value;

        public int CompareTo(internal_partial_classConversions_DapperTypeHandlerchar other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other == null) return 1;
            if(other is internal_partial_classConversions_DapperTypeHandlerchar x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type internal_partial_classConversions_DapperTypeHandlerchar", nameof(other));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ Value.GetHashCode();
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Char>.Default.GetHashCode();
                return hash;
            }
        }

        
// member...

public static readonly internal_partial_classConversions_DapperTypeHandlerchar One = new internal_partial_classConversions_DapperTypeHandlerchar("One",'1');

        
        public static global::System.Collections.Generic.IEnumerable<internal_partial_classConversions_DapperTypeHandlerchar> List()
        {
            yield return One;

        }        

        /// <summary>Returns the name of the enum.</summary>
    public override global::System.String ToString() => Name;

        


        public class DapperTypeHandler : global::Dapper.SqlMapper.TypeHandler<internal_partial_classConversions_DapperTypeHandlerchar>
        {
            public override void SetValue(global::System.Data.IDbDataParameter parameter, internal_partial_classConversions_DapperTypeHandlerchar value)
            {
                parameter.DbType = global::System.Data.DbType.StringFixedLength;
                parameter.Value = value.Value;
            }

            public override internal_partial_classConversions_DapperTypeHandlerchar Parse(object value)
            {
                return value switch
                {
                    global::System.Char charValue => internal_partial_classConversions_DapperTypeHandlerchar.Deserialize(charValue),
                    global::System.Int16 shortValue => internal_partial_classConversions_DapperTypeHandlerchar.Deserialize((global::System.Char)shortValue),
                    global::System.Int32 intValue => internal_partial_classConversions_DapperTypeHandlerchar.Deserialize((global::System.Char)intValue),
                    global::System.Int64 longValue => internal_partial_classConversions_DapperTypeHandlerchar.Deserialize((global::System.Char)longValue),
                    global::System.String stringValue when !global::System.String.IsNullOrEmpty(stringValue) && global::System.Char.TryParse(stringValue, out var result) => internal_partial_classConversions_DapperTypeHandlerchar.Deserialize(result),
                    _ => throw new global::System.InvalidCastException($"Unable to cast object of type {value.GetType()} to internal_partial_classConversions_DapperTypeHandlerchar"),
                };
            }
        }



        
        
    /// <inheritdoc cref="char.TryParse(string, out char)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(string s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out internal_partial_classConversions_DapperTypeHandlerchar result) {
        if(System.Char.TryParse(s, out var r)) {
            return TryFromValue(r, out result);
        }

        result = default;
        return false;
    }


        internal sealed class internal_partial_classConversions_DapperTypeHandlercharDebugView
        {
            private readonly internal_partial_classConversions_DapperTypeHandlerchar _t;

            internal_partial_classConversions_DapperTypeHandlercharDebugView(internal_partial_classConversions_DapperTypeHandlerchar t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Char";
            public System.Char Value => _t.Value ;

            public global::System.String Conversions => @"";
                }
    }
}
]