[  
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

#pragma warning disable CS1573

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Intellenum;
using System;
using Whatever;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(FooEnumSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(FooEnumTypeConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(FooEnumDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: Whatever.Foo, Value = { _value }")]
    public partial class FooEnum : 
        global::System.IEquatable<FooEnum>, 
        global::System.IComparable, 
        global::System.IComparable<FooEnum> 
    {
                private static readonly System.Lazy<System.Collections.Generic.Dictionary<string, FooEnum>> _namesToEnums = new( () =>
        new()
        {
            { "Item1", Item1 },
{ "Item2", Item2 },

        });

        private static readonly System.Lazy<System.Collections.Generic.Dictionary<Whatever.Foo, FooEnum>> _valuesToEnums = new( () =>
        new()
        {
            { Item1.Value, Item1 },
{ Item2.Value, Item2 },

        });

#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly Whatever.Foo _value;

        

        /// <summary>
        /// Gets the underlying <see cref="Whatever.Foo" /> value if set, otherwise default
        /// </summary>
        public Whatever.Foo Value => _value;

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public FooEnum()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
            Name = "[UNDEFINED]";
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private FooEnum(Whatever.Foo value)
        {
            _value = value;
            Name = "[INFERRED-TO-BE-REPLACED!]";
            _isInitialized = true;
        }        

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private FooEnum(string enumName, Whatever.Foo value)
        {
            _value = value;
            Name = enumName;
            _isInitialized = true;
        }

        public string Name { get; private set; }

        public void Deconstruct(out string Name, out Whatever.Foo Value)
        {
            Name = this.Name;
            Value = this.Value;
        }

        
        /// <summary>
        /// Builds a member from an enum value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static FooEnum FromValue(Whatever.Foo value)
        {
                bool b =  _valuesToEnums.Value.TryGetValue(value, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"FooEnum has no matching members with a value of '{value}'");
        }            

        /// <summary>
        /// Tries to get a member based on value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromValue(Whatever.Foo value, out FooEnum member)
        {
            return  _valuesToEnums.Value.TryGetValue(value, out member);
        }        

        /// <summary>
        /// Determines if there is a member that is defined with the specified value.
        /// </summary>
        /// <param name="value">The value to search for.</param>
        /// <returns>True if there is a member with matching value, otherwise False.</returns>
        public static bool IsDefined(Whatever.Foo value)
        {
            return _valuesToEnums.Value.TryGetValue(value, out _);
        }
        

        
        /// <summary>
        /// Gets the matching member based on name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static FooEnum FromName(ReadOnlySpan<char> name)
        {
                bool b = TryFromName(name, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"FooEnum has no matching members named '{name.ToString()}'");
        }

        /// <summary>
        /// Tries to get the matching member from a name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool TryFromName(ReadOnlySpan<char> name, out FooEnum member)
        {
            // Not a fan of using foreach here, but Dictionary<,>.KeyCollection is a bit limited
foreach (var key in _namesToEnums.Value.Keys)
{
    if (key.AsSpan() != name)
    {
        continue;
    }
    
    member = _namesToEnums.Value[key];
    return true;
}

member = default(FooEnum);
return false;
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool IsNamedDefined(ReadOnlySpan<char> name)
        {
            return TryFromName(name, out _);
        }
        

        /// <summary>
        /// Builds a member from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>A member of this type.</returns>
        private static FooEnum From(string name, Whatever.Foo value)
        {
                        if (value is null)
            {
                throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
            }


            FooEnum member = new FooEnum(name, value);

            return member;
        }

        // A placeholder method used by the source generator during compilation so that
        // users call 'Call' it. The source generator examines calls to this in order to 
        // generate physical members (e.g. public static readonly MyEnum Item1 = new...)
        private static void Member(string name, Whatever.Foo value)
        {
        }

        // only called internally when something has been deserialized into
        // its primitive type.
        private static FooEnum Deserialize(Whatever.Foo value)
        {
                        if (value is null)
            {
                throw new IntellenumCreationFailedException("Cannot create an Intellenum member with a null.");
            }


                    if(value == Item1.Value) return Item1;
        if(value == Item2.Value) return Item2;


            return FromValue(value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public global::System.Boolean Equals(FooEnum other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized members via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized members of this type.
            if(!_isInitialized || !other._isInitialized) return false;
	    	
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<Whatever.Foo>.Default.Equals(Value, other.Value);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FooEnum) obj);
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(FooEnum left, FooEnum right) => Equals(left, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(FooEnum left, FooEnum right) => !Equals(left, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(FooEnum left, Whatever.Foo right) => Equals(left.Value, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(FooEnum left, Whatever.Foo right) => !Equals(left.Value, right);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator ==(Whatever.Foo left, FooEnum right) => Equals(left, right.Value);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator !=(Whatever.Foo left, FooEnum right) => !Equals(left, right.Value);
        
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <(FooEnum left, FooEnum right) => left.CompareTo(right) < 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator <=(FooEnum left, FooEnum right) => left.CompareTo(right) <= 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >(FooEnum left, FooEnum right) => left.CompareTo(right) > 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean operator >=(FooEnum left, FooEnum right) => left.CompareTo(right) >= 0;

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static explicit operator FooEnum(Whatever.Foo value) => FromValue(value);

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator Whatever.Foo(FooEnum value) => value.Value;

        public int CompareTo(FooEnum other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other == null) return 1;
            if(other is FooEnum x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type FooEnum", nameof(other));
        }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ Value.GetHashCode();
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<Whatever.Foo>.Default.GetHashCode();
                return hash;
            }
        }

        
        
        public static global::System.Collections.Generic.IEnumerable<FooEnum> List()
        {
            yield return Item1;
yield return Item2;

        }        

        /// <summary>Returns the name of the enum.</summary>
    public override global::System.String ToString() => Name;

        
        class FooEnumSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<FooEnum>
        {
            public override FooEnum Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<Whatever.Foo>(ref reader, options);
                return FooEnum.Deserialize(primitive);
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, FooEnum value, global::System.Text.Json.JsonSerializerOptions options)
            {
                global::System.Text.Json.JsonSerializer.Serialize(writer, value.Value);
            }

#if NET6_0_OR_GREATER
            public override FooEnum ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                var primitive = global::System.Text.Json.JsonSerializer.Deserialize<Whatever.Foo>(ref reader, options);
                return FooEnum.Deserialize(primitive);
            }

            public override void WriteAsPropertyName(System.Text.Json.Utf8JsonWriter writer, FooEnum value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WritePropertyName(global::System.Text.Json.JsonSerializer.Serialize(value.Value));
            }
#endif            
        }


        class FooEnumTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(Whatever.Foo);
            }
        
            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                Whatever.Foo ut = (Whatever.Foo)value;

                return FooEnum.Deserialize(ut);
            }
        
            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(Whatever.Foo);
            }
        
            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is FooEnum idValue)
                {
                    return idValue.Value;
                }
        
                return base.ConvertTo(context, culture, value, destinationType);
            }
        }





        
        

        internal sealed class FooEnumDebugView
        {
            private readonly FooEnum _t;

            FooEnumDebugView(FooEnum t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "Whatever.Foo";
            public Whatever.Foo Value => _t.Value ;

            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(FooEnumSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(FooEnumTypeConverter))]
";
                }
    }
}
]