// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a source generator named Intellenum (https://github.com/SteveDunn/Intellenum)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0618

// Suppress warnings for 'Override methods on comparable types'.
#pragma warning disable CA1036

// Suppress Error MA0097 : A class that implements IComparable<T> or IComparable should override comparison operators
#pragma warning disable MA0097

// Suppress warning for 'The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.'
// The generator copies signatures from the BCL, e.g. for `TryParse`, and some of those have nullable annotations.
#pragma warning disable CS8669

// Suppress warnings about CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable CS1591

using Intellenum;
using System;

namespace Whatever
{

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage] 
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Intellenum", "1.0.0.0")]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(CustomerTypeSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(CustomerTypeTypeConverter))]

    [global::System.Diagnostics.DebuggerTypeProxyAttribute(typeof(CustomerTypeDebugView))]
    [global::System.Diagnostics.DebuggerDisplayAttribute("Underlying type: System.Int64, Value = { _value }")]
    public partial class CustomerType : 
        global::System.IEquatable<CustomerType>, 
        // global::System.IEquatable<System.Int64>, 
        global::System.IComparable, 
        global::System.IComparable<CustomerType> 
    {
        

#if DEBUG    
        private readonly global::System.Diagnostics.StackTrace _stackTrace = null;
#endif
        private readonly global::System.Boolean _isInitialized;
        private readonly System.Int64 _value;

        

        /// <summary>
        /// Gets the underlying <see cref="System.Int64" /> value if set, otherwise default
        /// </summary>
        public System.Int64 Value
        {
            [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            [global::System.Diagnostics.DebuggerStepThroughAttribute]
            get
            {
                return _value;
            }
        }

private void Throw()
{
#if DEBUG
                global::System.String message = "Use of uninitialized Value Object at: " + _stackTrace ?? "";
#else
                global::System.String message = "Use of uninitialized Value Object.";
#endif

                throw new IntellenumUninitialisedException(message);

}

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public CustomerType()
        {
#if DEBUG
            _stackTrace = new global::System.Diagnostics.StackTrace();
#endif
            _isInitialized = false;
            _value = default;
            Name = "[UNDEFINED]";
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private CustomerType(System.Int64 value)
        {
            _value = value;
            Name = "[INFERRED-TO-BE-REPLACED!]";
            _isInitialized = true;
        }        

        [global::System.Diagnostics.DebuggerStepThroughAttribute]
        private CustomerType(string enumName, System.Int64 value)
        {
            _value = value;
            Name = enumName;
            _isInitialized = true;
        }

        // exclude from serialization 

          
        public string Name { get; private set; }

        /// <summary>
        /// Builds an instance from an enum value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static CustomerType FromValue(System.Int64 value)
        {
                bool b = TryFromValue(value, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"CustomerType has no matching instances with a value of '{value}'");
        }            

        /// <summary>
        /// Tries to get an instance based on value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromValue(System.Int64 value, out CustomerType instance)
        {
            switch (value) 
{
    case -1:
        instance = CustomerType.Unspecified; 
        return true;
    case -2:
        instance = CustomerType.Unspecified1; 
        return true;
    case -3:
        instance = CustomerType.Unspecified2; 
        return true;
    case -4:
        instance = CustomerType.Unspecified3; 
        return true;
    case 42:
        instance = CustomerType.Cust42; 
        return true;
    default:
        instance = default;
        return false;
}

        }        

        public static bool IsDefined(System.Int64 value)
        {
            return value switch { -1 => true,
-2 => true,
-3 => true,
-4 => true,
42 => true,
_ => false
 };
        }

        public void Deconstruct(out string Name, out System.Int64 Value)
        {
            Name = this.Name;
            Value = this.Value;
        }

        /// <summary>
        /// Gets the matching instance based on name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static CustomerType FromName(string name)
        {
                bool b = TryFromName(name, out var ret);
    if(b) return ret;
    throw new IntellenumMatchFailedException($"CustomerType has no matching instances named '{name}'");
        }

        /// <summary>
        /// Tries to get the matching instance from a name.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>The matching enum, or an exception.</returns>
        public static bool TryFromName(string name, out CustomerType instance)
        {
            switch (name) 
{
    case ("Unspecified"):
        instance = CustomerType.Unspecified; 
        return true;
    case ("Unspecified1"):
        instance = CustomerType.Unspecified1; 
        return true;
    case ("Unspecified2"):
        instance = CustomerType.Unspecified2; 
        return true;
    case ("Unspecified3"):
        instance = CustomerType.Unspecified3; 
        return true;
    case ("Cust42"):
        instance = CustomerType.Cust42; 
        return true;
    default:
        instance = default;
        return false;
}

        }

        public static bool IsNamedDefined(string name)
        {
            return TryFromName(name, out _);
        }


        /// <summary>
        /// Builds an instance from the provided underlying type.
        /// </summary>
        /// <param name="value">The underlying type.</param>
        /// <returns>An instance of this type.</returns>
        private static CustomerType From(string name, System.Int64 value)
        {
            

            CustomerType instance = new CustomerType(name, value);

            return instance;
        }

        // placeholder method used by the source generator
        // to generate physical instances (e.g. public static readonly MyEnum Item1 = new...)
        private static void Instance(string name, System.Int64 value)
        {
        }

        // only called internally when something has been deserialized into
        // its primitive type.
        private static CustomerType Deserialize(System.Int64 value)
        {
            

                    if(value == Unspecified.Value) return Unspecified;
        if(value == Unspecified1.Value) return Unspecified1;
        if(value == Unspecified2.Value) return Unspecified2;
        if(value == Unspecified3.Value) return Unspecified3;
        if(value == Cust42.Value) return Cust42;


            return FromValue(value);
        }

        public global::System.Boolean Equals(CustomerType other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            // It's possible to create uninitialized instances via converters such as EfCore (HasDefaultValue), which call Equals.
            // We treat anything uninitialized as not equal to anything, even other uninitialized instances of this type.
            if(!_isInitialized || !other._isInitialized) return false;
	    	
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return GetType() == other.GetType() && global::System.Collections.Generic.EqualityComparer<System.Int64>.Default.Equals(Value, other.Value);
        }

        // public global::System.Boolean Equals(System.Int64 primitive) => Value.Equals(primitive);

        public override global::System.Boolean Equals(global::System.Object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CustomerType) obj);
        }

        public static global::System.Boolean operator ==(CustomerType left, CustomerType right) => Equals(left, right);
        public static global::System.Boolean operator !=(CustomerType left, CustomerType right) => !Equals(left, right);

        public static global::System.Boolean operator ==(CustomerType left, System.Int64 right) => Equals(left.Value, right);
        public static global::System.Boolean operator !=(CustomerType left, System.Int64 right) => !Equals(left.Value, right);

        public static global::System.Boolean operator ==(System.Int64 left, CustomerType right) => Equals(left, right.Value);
        public static global::System.Boolean operator !=(System.Int64 left, CustomerType right) => !Equals(left, right.Value);
        
        public static global::System.Boolean operator <(CustomerType left, CustomerType right) => left.CompareTo(right) < 0;
        public static global::System.Boolean operator <=(CustomerType left, CustomerType right) => left.CompareTo(right) <= 0;
        public static global::System.Boolean operator >(CustomerType left, CustomerType right) => left.CompareTo(right) > 0;
        public static global::System.Boolean operator >=(CustomerType left, CustomerType right) => left.CompareTo(right) >= 0;

        public static explicit operator CustomerType(System.Int64 value) => FromValue(value);
        public static implicit operator System.Int64(CustomerType value) => value.Value;

        public int CompareTo(CustomerType other) => Value.CompareTo(other.Value);
        public int CompareTo(object other) {
            if(other == null) return 1;
            if(other is CustomerType x) return CompareTo(x);
            throw new global::System.ArgumentException("Cannot compare to object as it is not of type CustomerType", nameof(other));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                global::System.Int32 hash = (global::System.Int32) 2166136261;
                hash = (hash * 16777619) ^ Value.GetHashCode();
                hash = (hash * 16777619) ^ GetType().GetHashCode();
                hash = (hash * 16777619) ^ global::System.Collections.Generic.EqualityComparer<System.Int64>.Default.GetHashCode();
                return hash;
            }
        }

        
// instance...

    
/// <summary>a short description that'll show up in intellisense</summary>
/// <returns>An immutable shared instance of "T:Whatever.CustomerType"</returns>
public static readonly CustomerType Unspecified = new CustomerType("Unspecified",-1);

// instance...

public static readonly CustomerType Unspecified1 = new CustomerType("Unspecified1",-2);

// instance...

    
/// <summary>&lt;some_xml&gt;whatever&lt;/some_xml</summary>
/// <returns>An immutable shared instance of "T:Whatever.CustomerType"</returns>
public static readonly CustomerType Unspecified2 = new CustomerType("Unspecified2",-3);

// instance...

public static readonly CustomerType Unspecified3 = new CustomerType("Unspecified3",-4);

// instance...

public static readonly CustomerType Cust42 = new CustomerType("Cust42",42);

        
        public static global::System.Collections.Generic.IEnumerable<CustomerType> List()
        {
            yield return Unspecified;
yield return Unspecified1;
yield return Unspecified2;
yield return Unspecified3;
yield return Cust42;

        }        

        /// <summary>Returns the name of the enum.</summary>
    public override global::System.String ToString() => Name;

        
        class CustomerTypeSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<CustomerType>
        {
            public override CustomerType Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
            {
                return CustomerType.Deserialize(reader.GetInt64());
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, CustomerType value, global::System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteNumberValue(value.Value);
            }
        }


        class CustomerTypeTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override global::System.Boolean CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Int64) || sourceType == typeof(global::System.String) || base.CanConvertFrom(context, sourceType);
            }

            public override global::System.Object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value)
            {
                return value switch
                {
                    global::System.Int64 longValue => CustomerType.Deserialize(longValue),
                    global::System.String stringValue when  !global::System.String.IsNullOrEmpty(stringValue) && long.TryParse(stringValue, out var result) => CustomerType.Deserialize(result),
                    _ => base.ConvertFrom(context, culture, value),
                };
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Type sourceType)
            {
                return sourceType == typeof(global::System.Int64) || sourceType == typeof(global::System.String) || base.CanConvertTo(context, sourceType);
            }

            public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::System.Object value, global::System.Type destinationType)
            {
                if (value is CustomerType idValue)
                {
                    if (destinationType == typeof(global::System.Int64))
                    {
                        return idValue.Value;
                    }

                    if (destinationType == typeof(global::System.String))
                    {
                        return idValue.Value.ToString();
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }


        public class EfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<CustomerType, global::System.Int64>
        {
            public EfCoreValueConverter() : this(null) { }
            public EfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints mappingHints = null)
                : base(
                    vo => vo.Value,
                    value => CustomerType.Deserialize(value),
                    mappingHints
                ) { }
        }


        
        
    /// <inheritdoc cref="long.TryParse(System.ReadOnlySpan{char}, System.Globalization.NumberStyles, System.IFormatProvider?, out long)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out CustomerType result) {
        if(System.Int64.TryParse(s, style, provider, out var r)) {
            result = FromValue(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="long.TryParse(System.ReadOnlySpan{char}, System.IFormatProvider?, out long)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out CustomerType result) {
        if(System.Int64.TryParse(s, provider, out var r)) {
            result = FromValue(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="long.TryParse(System.ReadOnlySpan{char}, out long)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(global::System.ReadOnlySpan<char> s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out CustomerType result) {
        if(System.Int64.TryParse(s, out var r)) {
            result = FromValue(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="long.TryParse(string?, System.Globalization.NumberStyles, System.IFormatProvider?, out long)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(string s, global::System.Globalization.NumberStyles style, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out CustomerType result) {
        if(System.Int64.TryParse(s, style, provider, out var r)) {
            result = FromValue(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="long.TryParse(string?, System.IFormatProvider?, out long)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(string s, global::System.IFormatProvider provider, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out CustomerType result) {
        if(System.Int64.TryParse(s, provider, out var r)) {
            result = FromValue(r);
            return true;
        }

        result = default;
        return false;
    }

    /// <inheritdoc cref="long.TryParse(string?, out long)"/>
    /// <summary>
    /// </summary>
    /// <returns>
    /// The value created via the <see cref="From"/> method.
    /// </returns>
    public static global::System.Boolean TryParse(string s, 
#if NETCOREAPP3_0_OR_GREATER
[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
 out CustomerType result) {
        if(System.Int64.TryParse(s, out var r)) {
            result = FromValue(r);
            return true;
        }

        result = default;
        return false;
    }


        internal sealed class CustomerTypeDebugView
        {
            private readonly CustomerType _t;

            CustomerTypeDebugView(CustomerType t)
            {
                _t = t;
            }

            public global::System.String UnderlyingType => "System.Int64";
            public System.Int64 Value => _t.Value ;

            public global::System.String Conversions => @"[global::System.Text.Json.Serialization.JsonConverter(typeof(CustomerTypeSystemTextJsonConverter))]
[global::System.ComponentModel.TypeConverter(typeof(CustomerTypeTypeConverter))]
";
                }
    }
}